/* tslint:disable */
/* eslint-disable */
/**
 * LuuGo - Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserContact
 */
export interface UserContact {
    /**
     * 
     * @type {string}
     * @memberof UserContact
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserContact
     */
    userId: string;
    /**
     * 
     * @type {Date}
     * @memberof UserContact
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserContact
     */
    readonly updatedAt?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof UserContact
     */
    type: UserContactTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof UserContact
     */
    value: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserContact
     */
    isVisible: boolean;
}


/**
 * @export
 */
export const UserContactTypeEnum = {
    Instagram: 'INSTAGRAM',
    Facebook: 'FACEBOOK',
    Phone: 'PHONE',
    Whatsapp: 'WHATSAPP',
    Email: 'EMAIL'
} as const;
export type UserContactTypeEnum = typeof UserContactTypeEnum[keyof typeof UserContactTypeEnum];


/**
 * Check if a given object implements the UserContact interface.
 */
export function instanceOfUserContact(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "value" in value;
    isInstance = isInstance && "isVisible" in value;

    return isInstance;
}

export function UserContactFromJSON(json: any): UserContact {
    return UserContactFromJSONTyped(json, false);
}

export function UserContactFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserContact {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'userId': json['userId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (json['updatedAt'] === null ? null : new Date(json['updatedAt'])),
        'type': json['type'],
        'value': json['value'],
        'isVisible': json['isVisible'],
    };
}

export function UserContactToJSON(value?: UserContact | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'userId': value.userId,
        'type': value.type,
        'value': value.value,
        'isVisible': value.isVisible,
    };
}

