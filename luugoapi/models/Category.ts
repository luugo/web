/* tslint:disable */
/* eslint-disable */
/**
 * LuuGo - Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof Category
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Category
     */
    readonly updatedAt?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    title: string;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    icon?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    parentCategoryId?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Category
     */
    isActive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Category
     */
    isVisibleInHome?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    type?: CategoryTypeEnum;
}


/**
 * @export
 */
export const CategoryTypeEnum = {
    Place: 'PLACE',
    Item: 'ITEM',
    Service: 'SERVICE',
    Auto: 'AUTO'
} as const;
export type CategoryTypeEnum = typeof CategoryTypeEnum[keyof typeof CategoryTypeEnum];


/**
 * Check if a given object implements the Category interface.
 */
export function instanceOfCategory(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "title" in value;

    return isInstance;
}

export function CategoryFromJSON(json: any): Category {
    return CategoryFromJSONTyped(json, false);
}

export function CategoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Category {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (json['updatedAt'] === null ? null : new Date(json['updatedAt'])),
        'title': json['title'],
        'icon': !exists(json, 'icon') ? undefined : json['icon'],
        'parentCategoryId': !exists(json, 'parentCategoryId') ? undefined : json['parentCategoryId'],
        'isActive': !exists(json, 'isActive') ? undefined : json['isActive'],
        'isVisibleInHome': !exists(json, 'isVisibleInHome') ? undefined : json['isVisibleInHome'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function CategoryToJSON(value?: Category | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'title': value.title,
        'icon': value.icon,
        'parentCategoryId': value.parentCategoryId,
        'isActive': value.isActive,
        'isVisibleInHome': value.isVisibleInHome,
        'type': value.type,
    };
}

