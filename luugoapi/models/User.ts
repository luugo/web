/* tslint:disable */
/* eslint-disable */
/**
 * LuuGo - Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserContact } from './UserContact';
import {
    UserContactFromJSON,
    UserContactFromJSONTyped,
    UserContactToJSON,
} from './UserContact';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    readonly updatedAt?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    authenticationId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    place: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    thumbnail?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    type: UserTypeEnum;
    /**
     * 
     * @type {Array<UserContact>}
     * @memberof User
     */
    contacts?: Array<UserContact>;
}


/**
 * @export
 */
export const UserTypeEnum = {
    Normal: 'NORMAL',
    Admin: 'ADMIN'
} as const;
export type UserTypeEnum = typeof UserTypeEnum[keyof typeof UserTypeEnum];


/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "firstName" in value;
    isInstance = isInstance && "lastName" in value;
    isInstance = isInstance && "place" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (json['updatedAt'] === null ? null : new Date(json['updatedAt'])),
        'authenticationId': !exists(json, 'authenticationId') ? undefined : json['authenticationId'],
        'firstName': json['firstName'],
        'lastName': json['lastName'],
        'place': json['place'],
        'thumbnail': !exists(json, 'thumbnail') ? undefined : json['thumbnail'],
        'type': json['type'],
        'contacts': !exists(json, 'contacts') ? undefined : ((json['contacts'] as Array<any>).map(UserContactFromJSON)),
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'authenticationId': value.authenticationId,
        'firstName': value.firstName,
        'lastName': value.lastName,
        'place': value.place,
        'thumbnail': value.thumbnail,
        'type': value.type,
        'contacts': value.contacts === undefined ? undefined : ((value.contacts as Array<any>).map(UserContactToJSON)),
    };
}

