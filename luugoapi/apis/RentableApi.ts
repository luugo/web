/* tslint:disable */
/* eslint-disable */
/**
 * LuuGo - Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Rentable,
} from '../models/index';
import {
    RentableFromJSON,
    RentableToJSON,
} from '../models/index';

export interface RentableDeleteRequest {
    id: string;
}

export interface RentableGetRequest {
    id?: string;
    place?: string;
    categoryId?: string;
    userId?: string;
}

export interface RentableNearbyLatitudeLongitudeGetRequest {
    latitude: number;
    longitude: number;
}

export interface RentablePostRequest {
    rentable: Rentable;
}

export interface RentablePutRequest {
    rentable: Rentable;
}

export interface RentableSearchInputGetRequest {
    input: string;
}

/**
 * 
 */
export class RentableApi extends runtime.BaseAPI {

    /**
     * Delete Operation
     * CRU[D]
     */
    async rentableDeleteRaw(requestParameters: RentableDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling rentableDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/rentable`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Operation
     * CRU[D]
     */
    async rentableDelete(requestParameters: RentableDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rentableDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Read Operation
     * C[R]UD
     */
    async rentableGetRaw(requestParameters: RentableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Rentable>>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.place !== undefined) {
            queryParameters['place'] = requestParameters.place;
        }

        if (requestParameters.categoryId !== undefined) {
            queryParameters['categoryId'] = requestParameters.categoryId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rentable`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RentableFromJSON));
    }

    /**
     * Read Operation
     * C[R]UD
     */
    async rentableGet(requestParameters: RentableGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Rentable>> {
        const response = await this.rentableGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read Operation
     * C[R]UD
     */
    async rentableNearbyLatitudeLongitudeGetRaw(requestParameters: RentableNearbyLatitudeLongitudeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Rentable>>> {
        if (requestParameters.latitude === null || requestParameters.latitude === undefined) {
            throw new runtime.RequiredError('latitude','Required parameter requestParameters.latitude was null or undefined when calling rentableNearbyLatitudeLongitudeGet.');
        }

        if (requestParameters.longitude === null || requestParameters.longitude === undefined) {
            throw new runtime.RequiredError('longitude','Required parameter requestParameters.longitude was null or undefined when calling rentableNearbyLatitudeLongitudeGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rentable/nearby/{latitude}/{longitude}`.replace(`{${"latitude"}}`, encodeURIComponent(String(requestParameters.latitude))).replace(`{${"longitude"}}`, encodeURIComponent(String(requestParameters.longitude))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RentableFromJSON));
    }

    /**
     * Read Operation
     * C[R]UD
     */
    async rentableNearbyLatitudeLongitudeGet(requestParameters: RentableNearbyLatitudeLongitudeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Rentable>> {
        const response = await this.rentableNearbyLatitudeLongitudeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Operation
     * [C]RUD
     */
    async rentablePostRaw(requestParameters: RentablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.rentable === null || requestParameters.rentable === undefined) {
            throw new runtime.RequiredError('rentable','Required parameter requestParameters.rentable was null or undefined when calling rentablePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/rentable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RentableToJSON(requestParameters.rentable),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create Operation
     * [C]RUD
     */
    async rentablePost(requestParameters: RentablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.rentablePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Operation
     * CR[U]D
     */
    async rentablePutRaw(requestParameters: RentablePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.rentable === null || requestParameters.rentable === undefined) {
            throw new runtime.RequiredError('rentable','Required parameter requestParameters.rentable was null or undefined when calling rentablePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rentable`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RentableToJSON(requestParameters.rentable),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Update Operation
     * CR[U]D
     */
    async rentablePut(requestParameters: RentablePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.rentablePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Operation
     * C[R]UD
     */
    async rentableSearchInputGetRaw(requestParameters: RentableSearchInputGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Rentable>>> {
        if (requestParameters.input === null || requestParameters.input === undefined) {
            throw new runtime.RequiredError('input','Required parameter requestParameters.input was null or undefined when calling rentableSearchInputGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rentable/search/{input}`.replace(`{${"input"}}`, encodeURIComponent(String(requestParameters.input))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RentableFromJSON));
    }

    /**
     * Search Operation
     * C[R]UD
     */
    async rentableSearchInputGet(requestParameters: RentableSearchInputGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Rentable>> {
        const response = await this.rentableSearchInputGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
