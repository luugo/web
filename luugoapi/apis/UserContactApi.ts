/* tslint:disable */
/* eslint-disable */
/**
 * LuuGo - Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UserContact,
} from '../models/index';
import {
    UserContactFromJSON,
    UserContactToJSON,
} from '../models/index';

export interface UserContactDeleteRequest {
    id?: string;
}

export interface UserContactGetRequest {
    userId: string;
    id?: string;
}

export interface UserContactPostRequest {
    userContact: UserContact;
}

export interface UserContactPutRequest {
    userContact: UserContact;
}

/**
 * 
 */
export class UserContactApi extends runtime.BaseAPI {

    /**
     * Delete Operation
     * CRU[D]
     */
    async userContactDeleteRaw(requestParameters: UserContactDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/userContact`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Operation
     * CRU[D]
     */
    async userContactDelete(requestParameters: UserContactDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userContactDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Read Operation
     * C[R]UD
     */
    async userContactGetRaw(requestParameters: UserContactGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserContact>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling userContactGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/userContact`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserContactFromJSON));
    }

    /**
     * Read Operation
     * C[R]UD
     */
    async userContactGet(requestParameters: UserContactGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserContact>> {
        const response = await this.userContactGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Operation
     * [C]RUD
     */
    async userContactPostRaw(requestParameters: UserContactPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.userContact === null || requestParameters.userContact === undefined) {
            throw new runtime.RequiredError('userContact','Required parameter requestParameters.userContact was null or undefined when calling userContactPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/userContact`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserContactToJSON(requestParameters.userContact),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create Operation
     * [C]RUD
     */
    async userContactPost(requestParameters: UserContactPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.userContactPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Operation
     * CR[U]D
     */
    async userContactPutRaw(requestParameters: UserContactPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.userContact === null || requestParameters.userContact === undefined) {
            throw new runtime.RequiredError('userContact','Required parameter requestParameters.userContact was null or undefined when calling userContactPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/userContact`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserContactToJSON(requestParameters.userContact),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Update Operation
     * CR[U]D
     */
    async userContactPut(requestParameters: UserContactPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.userContactPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
