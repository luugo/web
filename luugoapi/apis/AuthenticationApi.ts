/* tslint:disable */
/* eslint-disable */
/**
 * LuuGo - Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthenticationApplePostRequest,
  AuthenticationEmailPostRequest,
  AuthenticationEmailPutRequest,
  AuthenticationGooglePostRequest,
  AuthenticationPostDefaultResponse,
  AuthenticationPostRequest,
  AuthenticationPutRequest,
  AuthenticationResetPasswordPostRequest,
  AuthenticationResetPasswordPutRequest,
} from '../models/index';
import {
    AuthenticationApplePostRequestFromJSON,
    AuthenticationApplePostRequestToJSON,
    AuthenticationEmailPostRequestFromJSON,
    AuthenticationEmailPostRequestToJSON,
    AuthenticationEmailPutRequestFromJSON,
    AuthenticationEmailPutRequestToJSON,
    AuthenticationGooglePostRequestFromJSON,
    AuthenticationGooglePostRequestToJSON,
    AuthenticationPostDefaultResponseFromJSON,
    AuthenticationPostDefaultResponseToJSON,
    AuthenticationPostRequestFromJSON,
    AuthenticationPostRequestToJSON,
    AuthenticationPutRequestFromJSON,
    AuthenticationPutRequestToJSON,
    AuthenticationResetPasswordPostRequestFromJSON,
    AuthenticationResetPasswordPostRequestToJSON,
    AuthenticationResetPasswordPutRequestFromJSON,
    AuthenticationResetPasswordPutRequestToJSON,
} from '../models/index';

export interface AuthenticationApplePostOperationRequest {
    authenticationApplePostRequest: AuthenticationApplePostRequest;
}

export interface AuthenticationEmailDeleteRequest {
    authenticationEmailPostRequest: AuthenticationEmailPostRequest;
    acceptLanguage?: string;
}

export interface AuthenticationEmailPostOperationRequest {
    authenticationEmailPostRequest: AuthenticationEmailPostRequest;
    acceptLanguage?: string;
}

export interface AuthenticationEmailPutOperationRequest {
    authenticationEmailPutRequest: AuthenticationEmailPutRequest;
    acceptLanguage?: string;
}

export interface AuthenticationGooglePostOperationRequest {
    authenticationGooglePostRequest: AuthenticationGooglePostRequest;
}

export interface AuthenticationPostOperationRequest {
    authenticationPostRequest: AuthenticationPostRequest;
    acceptLanguage?: string;
}

export interface AuthenticationPutOperationRequest {
    authenticationPutRequest: AuthenticationPutRequest;
    acceptLanguage?: string;
}

export interface AuthenticationResetPasswordPostOperationRequest {
    authenticationResetPasswordPostRequest: AuthenticationResetPasswordPostRequest;
    acceptLanguage?: string;
}

export interface AuthenticationResetPasswordPutOperationRequest {
    authenticationResetPasswordPutRequest: AuthenticationResetPasswordPutRequest;
    acceptLanguage?: string;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Authenticate by Apple.
     * Authenticate by Apple
     */
    async authenticationApplePostRaw(requestParameters: AuthenticationApplePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationPostDefaultResponse>> {
        if (requestParameters.authenticationApplePostRequest === null || requestParameters.authenticationApplePostRequest === undefined) {
            throw new runtime.RequiredError('authenticationApplePostRequest','Required parameter requestParameters.authenticationApplePostRequest was null or undefined when calling authenticationApplePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication/apple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationApplePostRequestToJSON(requestParameters.authenticationApplePostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationPostDefaultResponseFromJSON(jsonValue));
    }

    /**
     * Authenticate by Apple.
     * Authenticate by Apple
     */
    async authenticationApplePost(requestParameters: AuthenticationApplePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationPostDefaultResponse> {
        const response = await this.authenticationApplePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an user by using the user authentication
     * Deletes an user by using the user authentication
     */
    async authenticationEmailDeleteRaw(requestParameters: AuthenticationEmailDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authenticationEmailPostRequest === null || requestParameters.authenticationEmailPostRequest === undefined) {
            throw new runtime.RequiredError('authenticationEmailPostRequest','Required parameter requestParameters.authenticationEmailPostRequest was null or undefined when calling authenticationEmailDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authentication/email`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationEmailPostRequestToJSON(requestParameters.authenticationEmailPostRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an user by using the user authentication
     * Deletes an user by using the user authentication
     */
    async authenticationEmailDelete(requestParameters: AuthenticationEmailDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authenticationEmailDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * This is the first step to register an user by email.
     * Register an authenthication
     */
    async authenticationEmailPostRaw(requestParameters: AuthenticationEmailPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authenticationEmailPostRequest === null || requestParameters.authenticationEmailPostRequest === undefined) {
            throw new runtime.RequiredError('authenticationEmailPostRequest','Required parameter requestParameters.authenticationEmailPostRequest was null or undefined when calling authenticationEmailPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authentication/email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationEmailPostRequestToJSON(requestParameters.authenticationEmailPostRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This is the first step to register an user by email.
     * Register an authenthication
     */
    async authenticationEmailPost(requestParameters: AuthenticationEmailPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authenticationEmailPostRaw(requestParameters, initOverrides);
    }

    /**
     * This is the second step to register an user by email.
     * Verify an email
     */
    async authenticationEmailPutRaw(requestParameters: AuthenticationEmailPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.authenticationEmailPutRequest === null || requestParameters.authenticationEmailPutRequest === undefined) {
            throw new runtime.RequiredError('authenticationEmailPutRequest','Required parameter requestParameters.authenticationEmailPutRequest was null or undefined when calling authenticationEmailPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authentication/email`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationEmailPutRequestToJSON(requestParameters.authenticationEmailPutRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * This is the second step to register an user by email.
     * Verify an email
     */
    async authenticationEmailPut(requestParameters: AuthenticationEmailPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.authenticationEmailPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Authenticate by Google.
     * Authenticate by Google
     */
    async authenticationGooglePostRaw(requestParameters: AuthenticationGooglePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationPostDefaultResponse>> {
        if (requestParameters.authenticationGooglePostRequest === null || requestParameters.authenticationGooglePostRequest === undefined) {
            throw new runtime.RequiredError('authenticationGooglePostRequest','Required parameter requestParameters.authenticationGooglePostRequest was null or undefined when calling authenticationGooglePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication/google`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationGooglePostRequestToJSON(requestParameters.authenticationGooglePostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationPostDefaultResponseFromJSON(jsonValue));
    }

    /**
     * Authenticate by Google.
     * Authenticate by Google
     */
    async authenticationGooglePost(requestParameters: AuthenticationGooglePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationPostDefaultResponse> {
        const response = await this.authenticationGooglePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Given an username and password it will return the user and a token which will be used for authenticate in many other api endpoints.
     * Authenticate the user
     */
    async authenticationPostRaw(requestParameters: AuthenticationPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationPostDefaultResponse>> {
        if (requestParameters.authenticationPostRequest === null || requestParameters.authenticationPostRequest === undefined) {
            throw new runtime.RequiredError('authenticationPostRequest','Required parameter requestParameters.authenticationPostRequest was null or undefined when calling authenticationPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authentication`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationPostRequestToJSON(requestParameters.authenticationPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationPostDefaultResponseFromJSON(jsonValue));
    }

    /**
     * Given an username and password it will return the user and a token which will be used for authenticate in many other api endpoints.
     * Authenticate the user
     */
    async authenticationPost(requestParameters: AuthenticationPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationPostDefaultResponse> {
        const response = await this.authenticationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Given the old password and a new password, change it
     * Change the password
     */
    async authenticationPutRaw(requestParameters: AuthenticationPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authenticationPutRequest === null || requestParameters.authenticationPutRequest === undefined) {
            throw new runtime.RequiredError('authenticationPutRequest','Required parameter requestParameters.authenticationPutRequest was null or undefined when calling authenticationPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/authentication`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationPutRequestToJSON(requestParameters.authenticationPutRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Given the old password and a new password, change it
     * Change the password
     */
    async authenticationPut(requestParameters: AuthenticationPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authenticationPutRaw(requestParameters, initOverrides);
    }

    /**
     * This is the first step to reset the user password.
     * Create the reset password token and send it by email to the user
     */
    async authenticationResetPasswordPostRaw(requestParameters: AuthenticationResetPasswordPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authenticationResetPasswordPostRequest === null || requestParameters.authenticationResetPasswordPostRequest === undefined) {
            throw new runtime.RequiredError('authenticationResetPasswordPostRequest','Required parameter requestParameters.authenticationResetPasswordPostRequest was null or undefined when calling authenticationResetPasswordPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authentication/resetPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationResetPasswordPostRequestToJSON(requestParameters.authenticationResetPasswordPostRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This is the first step to reset the user password.
     * Create the reset password token and send it by email to the user
     */
    async authenticationResetPasswordPost(requestParameters: AuthenticationResetPasswordPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authenticationResetPasswordPostRaw(requestParameters, initOverrides);
    }

    /**
     * This is the second and final step to recovery the user password.
     * Reset the user password
     */
    async authenticationResetPasswordPutRaw(requestParameters: AuthenticationResetPasswordPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.authenticationResetPasswordPutRequest === null || requestParameters.authenticationResetPasswordPutRequest === undefined) {
            throw new runtime.RequiredError('authenticationResetPasswordPutRequest','Required parameter requestParameters.authenticationResetPasswordPutRequest was null or undefined when calling authenticationResetPasswordPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authentication/resetPassword`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationResetPasswordPutRequestToJSON(requestParameters.authenticationResetPasswordPutRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * This is the second and final step to recovery the user password.
     * Reset the user password
     */
    async authenticationResetPasswordPut(requestParameters: AuthenticationResetPasswordPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.authenticationResetPasswordPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
