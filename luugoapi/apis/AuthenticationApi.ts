/* tslint:disable */
/* eslint-disable */
/**
 * LuuGo - Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthenticationEmailPostRequest,
  AuthenticationEmailPutRequest,
  AuthenticationPostDefaultResponse,
  AuthenticationPostRequest,
} from '../models/index';
import {
    AuthenticationEmailPostRequestFromJSON,
    AuthenticationEmailPostRequestToJSON,
    AuthenticationEmailPutRequestFromJSON,
    AuthenticationEmailPutRequestToJSON,
    AuthenticationPostDefaultResponseFromJSON,
    AuthenticationPostDefaultResponseToJSON,
    AuthenticationPostRequestFromJSON,
    AuthenticationPostRequestToJSON,
} from '../models/index';

export interface AuthenticationEmailDeleteRequest {
    authenticationEmailPostRequest: AuthenticationEmailPostRequest;
}

export interface AuthenticationEmailPostOperationRequest {
    authenticationEmailPostRequest: AuthenticationEmailPostRequest;
}

export interface AuthenticationEmailPutOperationRequest {
    authenticationEmailPutRequest: AuthenticationEmailPutRequest;
}

export interface AuthenticationPostOperationRequest {
    authenticationPostRequest: AuthenticationPostRequest;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Deletes an user by using the user authentication
     * Deletes an user by using the user authentication
     */
    async authenticationEmailDeleteRaw(requestParameters: AuthenticationEmailDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authenticationEmailPostRequest === null || requestParameters.authenticationEmailPostRequest === undefined) {
            throw new runtime.RequiredError('authenticationEmailPostRequest','Required parameter requestParameters.authenticationEmailPostRequest was null or undefined when calling authenticationEmailDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication/email`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationEmailPostRequestToJSON(requestParameters.authenticationEmailPostRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an user by using the user authentication
     * Deletes an user by using the user authentication
     */
    async authenticationEmailDelete(requestParameters: AuthenticationEmailDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authenticationEmailDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * This is the first step to register an user by email.
     * Register an authenthication
     */
    async authenticationEmailPostRaw(requestParameters: AuthenticationEmailPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authenticationEmailPostRequest === null || requestParameters.authenticationEmailPostRequest === undefined) {
            throw new runtime.RequiredError('authenticationEmailPostRequest','Required parameter requestParameters.authenticationEmailPostRequest was null or undefined when calling authenticationEmailPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication/email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationEmailPostRequestToJSON(requestParameters.authenticationEmailPostRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This is the first step to register an user by email.
     * Register an authenthication
     */
    async authenticationEmailPost(requestParameters: AuthenticationEmailPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authenticationEmailPostRaw(requestParameters, initOverrides);
    }

    /**
     * This is the second step to register an user by email.
     * Verify an email
     */
    async authenticationEmailPutRaw(requestParameters: AuthenticationEmailPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.authenticationEmailPutRequest === null || requestParameters.authenticationEmailPutRequest === undefined) {
            throw new runtime.RequiredError('authenticationEmailPutRequest','Required parameter requestParameters.authenticationEmailPutRequest was null or undefined when calling authenticationEmailPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication/email`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationEmailPutRequestToJSON(requestParameters.authenticationEmailPutRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * This is the second step to register an user by email.
     * Verify an email
     */
    async authenticationEmailPut(requestParameters: AuthenticationEmailPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.authenticationEmailPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Given an username and password it will return the user and a token which will be used for authenticate in many other api endpoints.
     * Authenticate the user
     */
    async authenticationPostRaw(requestParameters: AuthenticationPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationPostDefaultResponse>> {
        if (requestParameters.authenticationPostRequest === null || requestParameters.authenticationPostRequest === undefined) {
            throw new runtime.RequiredError('authenticationPostRequest','Required parameter requestParameters.authenticationPostRequest was null or undefined when calling authenticationPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationPostRequestToJSON(requestParameters.authenticationPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationPostDefaultResponseFromJSON(jsonValue));
    }

    /**
     * Given an username and password it will return the user and a token which will be used for authenticate in many other api endpoints.
     * Authenticate the user
     */
    async authenticationPost(requestParameters: AuthenticationPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationPostDefaultResponse> {
        const response = await this.authenticationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
