/* tslint:disable */
/* eslint-disable */
/**
 * LuuGo - Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Media,
} from '../models/index';
import {
    MediaFromJSON,
    MediaToJSON,
} from '../models/index';

export interface MediaGetRequest {
    id?: string;
    rentableId?: string | null;
}

export interface MediaPostRequest {
    id?: string;
    createdAt?: Date;
    updatedAt?: Date | null;
    rentableId?: string;
    url?: string;
    filename?: string;
    file?: Blob;
    type?: MediaPostTypeEnum;
}

/**
 * 
 */
export class MediaApi extends runtime.BaseAPI {

    /**
     * Read Operation
     * C[R]UD
     */
    async mediaGetRaw(requestParameters: MediaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Media>>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.rentableId !== undefined) {
            queryParameters['rentableId'] = requestParameters.rentableId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/media`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MediaFromJSON));
    }

    /**
     * Read Operation
     * C[R]UD
     */
    async mediaGet(requestParameters: MediaGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Media>> {
        const response = await this.mediaGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Operation
     * [C]RUD
     */
    async mediaPostRaw(requestParameters: MediaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.id !== undefined) {
            formParams.append('id', requestParameters.id as any);
        }

        if (requestParameters.createdAt !== undefined) {
            formParams.append('createdAt', requestParameters.createdAt as any);
        }

        if (requestParameters.updatedAt !== undefined) {
            formParams.append('updatedAt', requestParameters.updatedAt as any);
        }

        if (requestParameters.rentableId !== undefined) {
            formParams.append('rentableId', requestParameters.rentableId as any);
        }

        if (requestParameters.url !== undefined) {
            formParams.append('url', requestParameters.url as any);
        }

        if (requestParameters.filename !== undefined) {
            formParams.append('filename', requestParameters.filename as any);
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.type !== undefined) {
            formParams.append('type', requestParameters.type as any);
        }

        const response = await this.request({
            path: `/media`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create Operation
     * [C]RUD
     */
    async mediaPost(requestParameters: MediaPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.mediaPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const MediaPostTypeEnum = {
    Photo: 'PHOTO',
    Video: 'VIDEO'
} as const;
export type MediaPostTypeEnum = typeof MediaPostTypeEnum[keyof typeof MediaPostTypeEnum];
